type token =
  | TRUTH
  | FALSITY
  | INT of (string)
  | IDENT of (string)
  | SPECIAL_IDENT of (string)
  | COMMENT of (string)
  | FN_PTR of (string)
  | LET
  | EQ
  | PLUS
  | MINUS
  | MULTIPLY
  | DIVIDE
  | UMINUS
  | LANGLE
  | RANGLE
  | LANGLE_EQ
  | RANGLE_EQ
  | LONG_EQ
  | NEWLINE
  | EOF
  | SEMICOLLON
  | LPARAN
  | RPARAN
  | LBRACE
  | RBRACE
  | LSQBR
  | RSQBR
  | IF
  | ELSE
  | FN
  | ARROW
  | COMMA
  | CALL
  | INT_T
  | COLLON
  | TYPE_HINT
  | AT
  | PROPAND
  | PROPOR
  | PROP_IMPLICATION
  | PROPEQ
  | FATARROW
  | TOTAL
  | DIVERGENT
  | MAX_COMP_KIND
  | STRING of (string)
  | FORALL
  | SLASH
  | DOT
  | PROPOSITION
  | TYPE
  | PRE_TYPE
  | KIND
  | COMPUTATION_KIND
  | PREDICATE
  | TYPE_BUILDER
  | QUIT
  | RESET
  | AXIOM
  | TC_IR_TERM
  | IR_DEFINITION
  | IR_PRINT_DEFINITION
  | IR_IS_CONV
  | IR_SIMPL
  | IR_LOAD_MOD
  | REC
  | AND_INTRO
  | OR_INTRO_L
  | OR_INTRO_R
  | AND_ELIM_L
  | AND_ELIM_R
  | OR_ELIM
  | EQ_INTRO
  | EQ_ELIM
  | FALSE_ELIM_PROP
  | FALSE_ELIM_TYPE
  | FN_PTR_TYPE
  | DEREF_FN_PTR
  | PROOF_OF_TRUTH
  | BOOL_TRUE
  | BOOL_FALSE
  | BOOL_TYPE

open Parsing;;
let _ = parse_error;;
# 2 "ast.mly"
(*INSRTIONEND*)
# 91 "ast.ml"
let yytransl_const = [|
  257 (* TRUTH *);
  258 (* FALSITY *);
  264 (* LET *);
  265 (* EQ *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* MULTIPLY *);
  269 (* DIVIDE *);
  270 (* UMINUS *);
  271 (* LANGLE *);
  272 (* RANGLE *);
  273 (* LANGLE_EQ *);
  274 (* RANGLE_EQ *);
  275 (* LONG_EQ *);
  276 (* NEWLINE *);
    0 (* EOF *);
  277 (* SEMICOLLON *);
  278 (* LPARAN *);
  279 (* RPARAN *);
  280 (* LBRACE *);
  281 (* RBRACE *);
  282 (* LSQBR *);
  283 (* RSQBR *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FN *);
  287 (* ARROW *);
  288 (* COMMA *);
  289 (* CALL *);
  290 (* INT_T *);
  291 (* COLLON *);
  292 (* TYPE_HINT *);
  293 (* AT *);
  294 (* PROPAND *);
  295 (* PROPOR *);
  296 (* PROP_IMPLICATION *);
  297 (* PROPEQ *);
  298 (* FATARROW *);
  299 (* TOTAL *);
  300 (* DIVERGENT *);
  301 (* MAX_COMP_KIND *);
  303 (* FORALL *);
  304 (* SLASH *);
  305 (* DOT *);
  306 (* PROPOSITION *);
  307 (* TYPE *);
  308 (* PRE_TYPE *);
  309 (* KIND *);
  310 (* COMPUTATION_KIND *);
  311 (* PREDICATE *);
  312 (* TYPE_BUILDER *);
  313 (* QUIT *);
  314 (* RESET *);
  315 (* AXIOM *);
  316 (* TC_IR_TERM *);
  317 (* IR_DEFINITION *);
  318 (* IR_PRINT_DEFINITION *);
  319 (* IR_IS_CONV *);
  320 (* IR_SIMPL *);
  321 (* IR_LOAD_MOD *);
  322 (* REC *);
  323 (* AND_INTRO *);
  324 (* OR_INTRO_L *);
  325 (* OR_INTRO_R *);
  326 (* AND_ELIM_L *);
  327 (* AND_ELIM_R *);
  328 (* OR_ELIM *);
  329 (* EQ_INTRO *);
  330 (* EQ_ELIM *);
  331 (* FALSE_ELIM_PROP *);
  332 (* FALSE_ELIM_TYPE *);
  333 (* FN_PTR_TYPE *);
  334 (* DEREF_FN_PTR *);
  335 (* PROOF_OF_TRUTH *);
  336 (* BOOL_TRUE *);
  337 (* BOOL_FALSE *);
  338 (* BOOL_TYPE *);
    0|]

let yytransl_block = [|
  259 (* INT *);
  260 (* IDENT *);
  261 (* SPECIAL_IDENT *);
  262 (* COMMENT *);
  263 (* FN_PTR *);
  302 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\006\000\006\000\007\000\007\000\010\000\
\010\000\011\000\009\000\009\000\009\000\012\000\012\000\013\000\
\013\000\014\000\014\000\015\000\015\000\015\000\016\000\016\000\
\008\000\017\000\017\000\017\000\017\000\017\000\017\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\019\000\019\000\020\000\020\000\018\000\
\018\000\018\000\021\000\021\000\022\000\022\000\022\000\022\000\
\022\000\022\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\024\000\024\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\026\000\026\000\003\000\003\000\027\000\028\000\
\028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\004\000\005\000\005\000\000\000\000\000\000\000\
\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\006\000\008\000\001\000\000\000\003\000\
\001\000\003\000\002\000\001\000\006\000\001\000\000\000\003\000\
\001\000\004\000\001\000\003\000\001\000\002\000\000\000\001\000\
\003\000\002\000\001\000\001\000\001\000\004\000\003\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\001\000\000\000\001\000\003\000\001\000\005\000\
\005\000\003\000\001\000\003\000\008\000\012\000\010\000\005\000\
\009\000\007\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\001\000\001\000\001\000\
\004\000\007\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\008\000\004\000\004\000\001\000\001\000\001\000\008\000\
\006\000\006\000\001\000\001\000\001\000\001\000\002\000\001\000\
\001\000\002\000\003\000\003\000\003\000\003\000\003\000\006\000\
\003\000\005\000\001\000\006\000\001\000\003\000\005\000\002\000\
\001\000\001\000\001\000\004\000\002\000\005\000\002\000\003\000\
\002\000\002\000\002\000\001\000\001\000\002\000\002\000\002\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
\000\000\126\000\000\000\028\000\027\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\029\000\085\000\087\000\064\000\
\060\000\065\000\000\000\000\000\000\000\063\000\061\000\062\000\
\000\000\000\000\000\000\066\000\067\000\068\000\000\000\070\000\
\071\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\
\091\000\092\000\093\000\128\000\094\000\000\000\000\000\000\000\
\000\000\114\000\115\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\000\000\000\125\000\124\000\130\000\001\000\
\000\000\002\000\042\000\026\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\117\000\000\000\119\000\
\000\000\121\000\122\000\123\000\000\000\031\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\110\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\020\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\084\000\073\000\000\000\
\116\000\000\000\112\000\000\000\000\000\000\000\000\000\000\000\
\049\000\048\000\046\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\000\000\000\
\000\000\012\000\010\000\000\000\004\000\008\000\000\000\000\000\
\075\000\000\000\108\000\000\000\076\000\077\000\078\000\079\000\
\080\000\000\000\081\000\000\000\089\000\090\000\000\000\011\000\
\000\000\000\000\000\000\000\000\058\000\074\000\000\000\000\000\
\111\000\000\000\000\000\014\000\005\000\000\000\000\000\082\000\
\088\000\000\000\000\000\000\000\057\000\016\000\000\000\000\000\
\055\000\013\000\000\000\054\000"

let yydgoto = "\006\000\
\010\000\087\000\060\000\075\000\079\000\011\000\195\000\019\000\
\034\001\196\000\197\000\035\001\036\001\088\000\089\000\090\000\
\020\000\021\000\157\000\158\000\167\000\061\000\062\000\063\000\
\064\000\065\000\191\000\192\000\076\000"

let yysindex = "\114\000\
\008\000\051\255\216\003\138\255\018\001\000\000\008\000\000\000\
\005\255\000\000\008\000\000\000\000\000\051\255\041\255\063\255\
\051\255\165\255\000\000\014\255\000\000\000\000\000\000\000\000\
\000\000\000\000\042\004\216\003\134\003\000\000\000\000\000\000\
\015\255\022\255\042\255\000\000\000\000\000\000\027\255\000\000\
\000\000\000\000\032\255\026\255\038\255\039\255\048\255\067\255\
\068\255\071\255\072\255\076\255\099\255\096\255\097\255\000\000\
\000\000\000\000\000\000\000\000\000\000\115\255\124\004\011\255\
\129\255\000\000\000\000\132\255\216\003\133\255\147\255\032\005\
\216\003\103\255\000\000\108\255\000\000\000\000\000\000\000\000\
\136\255\000\000\000\000\000\000\151\255\156\255\165\255\150\255\
\000\000\148\255\128\255\051\255\051\255\092\255\051\255\051\255\
\051\255\051\255\051\255\051\255\051\255\000\000\149\255\216\003\
\155\255\216\003\152\255\153\255\182\255\179\255\216\003\216\003\
\216\003\216\003\216\003\216\003\216\003\216\003\216\003\216\003\
\216\003\216\003\216\003\042\004\115\255\042\004\042\004\042\004\
\032\005\032\005\042\004\216\003\154\255\000\000\169\255\000\000\
\206\004\000\000\000\000\000\000\186\255\000\000\184\255\063\255\
\000\000\175\255\250\254\250\254\014\255\000\000\143\255\143\255\
\143\255\143\255\203\255\116\255\183\255\000\000\000\000\189\255\
\216\003\177\255\216\003\216\003\180\255\178\255\190\255\191\255\
\192\255\193\255\194\255\196\255\197\255\198\255\199\255\200\255\
\201\255\207\255\208\255\206\255\018\255\004\255\215\255\215\255\
\032\005\032\005\021\255\000\000\216\003\232\255\169\255\228\255\
\115\255\204\255\217\255\000\000\210\255\051\255\000\000\010\255\
\051\255\000\000\216\003\213\255\216\003\202\255\205\255\000\000\
\179\255\218\255\216\003\216\003\216\003\216\003\216\003\216\003\
\216\003\216\003\216\003\216\003\000\000\000\000\000\000\032\005\
\000\000\211\255\000\000\216\003\017\255\242\254\186\255\165\255\
\000\000\000\000\000\000\219\255\216\255\225\255\042\004\216\003\
\000\000\246\255\227\255\230\255\233\255\234\255\239\255\220\255\
\240\255\223\255\242\255\248\255\032\005\216\003\000\000\252\255\
\254\255\000\000\000\000\017\255\000\000\000\000\216\003\044\255\
\000\000\018\255\000\000\250\255\000\000\000\000\000\000\000\000\
\000\000\216\003\000\000\216\003\000\000\000\000\004\000\000\000\
\017\255\006\000\009\000\216\003\000\000\000\000\013\000\018\000\
\000\000\255\255\019\000\000\000\000\000\014\000\022\000\000\000\
\000\000\017\255\017\000\053\255\000\000\000\000\017\255\216\003\
\000\000\000\000\024\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\059\001\000\000\125\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\165\000\088\001\084\002\
\055\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\255\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\247\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\040\000\
\000\000\102\002\167\002\185\002\148\002\000\000\159\000\241\000\
\199\002\215\002\064\001\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\141\001\000\000\252\001\028\002\
\120\001\170\001\049\002\000\000\000\000\000\000\080\000\000\000\
\042\000\000\000\000\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\255\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\202\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\223\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\077\000\000\000\000\000\000\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\081\000\010\000\146\003\096\001\000\000\000\000\000\000\168\255\
\031\255\127\000\000\000\000\000\061\000\000\000\221\000\000\000\
\019\001\168\000\000\000\171\000\170\000\253\254\195\255\145\255\
\229\255\134\000\000\000\189\000\000\000"

let yytablesize = 1650
let yytable = "\102\000\
\056\000\125\000\146\000\003\001\029\001\094\000\095\000\008\000\
\081\000\016\000\137\000\018\000\126\000\127\000\128\000\129\000\
\004\001\185\000\186\000\126\000\127\000\128\000\129\000\083\000\
\085\000\107\000\091\000\127\000\128\000\129\000\127\000\128\000\
\129\000\016\000\026\001\101\000\106\000\017\000\000\001\224\000\
\049\001\130\000\131\000\012\000\013\000\108\000\001\001\111\000\
\130\000\131\000\002\001\014\000\109\000\012\000\013\000\130\000\
\131\000\110\000\130\000\112\000\113\000\014\000\015\000\084\000\
\016\000\012\000\013\000\028\001\017\000\114\000\086\000\029\000\
\015\000\014\000\016\000\193\000\048\001\050\001\017\000\019\000\
\029\000\018\000\053\000\019\000\015\000\018\000\016\000\080\000\
\115\000\116\000\017\000\082\000\117\000\118\000\012\000\013\000\
\181\000\119\000\182\000\183\000\184\000\147\000\148\000\187\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\233\000\
\253\000\015\000\001\000\002\000\003\000\004\000\005\000\017\000\
\120\000\121\000\122\000\125\000\125\000\092\000\093\000\094\000\
\095\000\123\000\096\000\097\000\098\000\099\000\100\000\133\000\
\135\000\092\000\093\000\094\000\095\000\005\001\096\000\097\000\
\098\000\099\000\100\000\201\000\139\000\132\000\136\000\016\000\
\092\000\093\000\094\000\095\000\140\000\141\000\037\000\143\000\
\092\000\093\000\094\000\095\000\096\000\096\000\097\000\098\000\
\099\000\100\000\144\000\159\000\145\000\142\000\092\000\093\000\
\094\000\095\000\161\000\096\000\097\000\098\000\099\000\100\000\
\165\000\166\000\163\000\164\000\189\000\194\000\190\000\125\000\
\198\000\037\001\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\200\000\203\000\202\000\208\000\232\000\
\205\000\209\000\156\000\010\001\092\000\093\000\094\000\095\000\
\210\000\096\000\097\000\098\000\099\000\223\000\211\000\212\000\
\213\000\214\000\129\000\215\000\216\000\217\000\218\000\219\000\
\220\000\221\000\222\000\226\000\228\000\237\000\229\000\230\000\
\038\000\231\000\007\001\242\000\008\001\254\000\095\000\009\001\
\012\001\013\001\239\000\018\001\014\001\240\000\020\001\015\001\
\016\001\056\000\056\000\056\000\056\000\017\001\019\001\056\000\
\021\001\056\000\056\000\056\000\056\000\007\000\022\001\056\000\
\056\000\077\000\024\001\025\001\030\001\056\000\056\000\056\000\
\056\000\056\000\033\001\056\000\056\000\016\000\042\001\056\000\
\056\000\038\001\056\000\040\001\056\000\009\000\056\000\056\000\
\041\001\043\001\044\001\056\000\056\000\056\000\045\001\047\001\
\052\001\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\023\000\127\000\021\000\044\000\007\000\051\000\041\000\
\022\000\047\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\053\000\053\000\053\000\053\000\097\000\
\113\000\053\000\120\000\053\000\053\000\053\000\053\000\009\000\
\015\000\053\000\053\000\017\000\078\000\006\001\046\001\053\000\
\053\000\053\000\053\000\053\000\199\000\053\000\053\000\234\000\
\149\000\053\000\053\000\235\000\053\000\011\001\053\000\101\000\
\053\000\053\000\241\000\227\000\000\000\053\000\053\000\053\000\
\000\000\000\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\000\000\105\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\096\000\096\000\096\000\
\096\000\103\000\000\000\096\000\000\000\096\000\096\000\096\000\
\096\000\037\000\000\000\037\000\096\000\037\000\037\000\037\000\
\000\000\096\000\096\000\096\000\096\000\096\000\037\000\096\000\
\096\000\000\000\000\000\096\000\096\000\000\000\096\000\000\000\
\096\000\106\000\096\000\096\000\000\000\000\000\000\000\096\000\
\096\000\096\000\000\000\000\000\000\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\000\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\095\000\
\095\000\095\000\095\000\099\000\000\000\095\000\000\000\095\000\
\095\000\095\000\095\000\038\000\000\000\038\000\095\000\038\000\
\038\000\038\000\000\000\095\000\095\000\095\000\095\000\095\000\
\038\000\095\000\095\000\000\000\000\000\095\000\095\000\000\000\
\095\000\000\000\095\000\100\000\095\000\095\000\000\000\000\000\
\000\000\095\000\095\000\095\000\000\000\000\000\000\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\000\000\
\102\000\000\000\000\000\000\000\000\000\000\000\109\000\000\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\107\000\041\000\000\000\041\000\041\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\097\000\097\000\097\000\097\000\000\000\050\000\000\000\097\000\
\000\000\000\000\000\000\000\000\097\000\000\000\097\000\097\000\
\097\000\000\000\097\000\000\000\000\000\000\000\000\000\097\000\
\000\000\000\000\000\000\097\000\032\000\097\000\097\000\000\000\
\101\000\101\000\101\000\101\000\000\000\000\000\000\000\101\000\
\097\000\000\000\000\000\000\000\101\000\000\000\101\000\101\000\
\101\000\000\000\101\000\035\000\000\000\105\000\000\000\101\000\
\000\000\000\000\000\000\101\000\105\000\101\000\101\000\000\000\
\000\000\105\000\000\000\105\000\105\000\105\000\033\000\105\000\
\101\000\000\000\000\000\000\000\105\000\000\000\000\000\000\000\
\105\000\000\000\103\000\103\000\103\000\103\000\000\000\000\000\
\034\000\103\000\000\000\000\000\000\000\105\000\103\000\000\000\
\103\000\103\000\103\000\000\000\103\000\000\000\039\000\000\000\
\000\000\103\000\000\000\000\000\000\000\103\000\000\000\103\000\
\103\000\000\000\106\000\106\000\106\000\106\000\040\000\000\000\
\000\000\106\000\103\000\000\000\000\000\000\000\106\000\000\000\
\106\000\106\000\106\000\000\000\106\000\000\000\000\000\104\000\
\000\000\106\000\000\000\000\000\000\000\106\000\104\000\106\000\
\106\000\000\000\000\000\104\000\000\000\104\000\104\000\104\000\
\000\000\104\000\106\000\000\000\000\000\000\000\104\000\000\000\
\000\000\000\000\104\000\000\000\099\000\099\000\099\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\000\000\104\000\
\099\000\000\000\099\000\099\000\099\000\000\000\099\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\000\000\099\000\
\000\000\099\000\099\000\000\000\100\000\100\000\100\000\000\000\
\000\000\000\000\000\000\100\000\099\000\000\000\000\000\000\000\
\100\000\000\000\100\000\100\000\100\000\000\000\100\000\000\000\
\000\000\102\000\000\000\100\000\000\000\000\000\000\000\100\000\
\102\000\100\000\100\000\000\000\000\000\102\000\109\000\102\000\
\102\000\102\000\000\000\102\000\100\000\109\000\109\000\109\000\
\102\000\109\000\000\000\000\000\102\000\000\000\109\000\102\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\102\000\000\000\107\000\000\000\000\000\000\000\109\000\
\107\000\000\000\107\000\107\000\107\000\000\000\107\000\050\000\
\050\000\050\000\050\000\107\000\050\000\050\000\050\000\050\000\
\050\000\000\000\050\000\050\000\050\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\107\000\050\000\032\000\032\000\
\032\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
\000\000\032\000\000\000\032\000\032\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\035\000\035\000\035\000\
\035\000\000\000\035\000\035\000\035\000\035\000\035\000\000\000\
\035\000\000\000\035\000\035\000\035\000\103\000\105\000\000\000\
\033\000\033\000\000\000\035\000\000\000\033\000\033\000\033\000\
\033\000\033\000\000\000\033\000\000\000\033\000\033\000\033\000\
\000\000\000\000\034\000\034\000\000\000\000\000\033\000\034\000\
\034\000\034\000\034\000\034\000\000\000\034\000\000\000\034\000\
\034\000\034\000\000\000\000\000\000\000\000\000\134\000\000\000\
\034\000\039\000\138\000\039\000\000\000\039\000\039\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\040\000\000\000\040\000\000\000\040\000\040\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\160\000\000\000\162\000\000\000\000\000\000\000\000\000\
\168\000\169\000\170\000\171\000\172\000\173\000\174\000\175\000\
\176\000\177\000\178\000\179\000\180\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\188\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\204\000\000\000\206\000\207\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\236\000\000\000\238\000\000\000\
\000\000\000\000\000\000\000\000\243\000\244\000\245\000\246\000\
\247\000\248\000\249\000\250\000\251\000\252\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\255\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\023\000\
\024\000\025\000\000\000\000\000\026\000\000\000\000\000\023\001\
\027\000\000\000\000\000\000\000\104\000\000\000\000\000\000\000\
\027\001\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\031\001\000\000\032\001\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\039\001\000\000\000\000\
\031\000\032\000\033\000\000\000\034\000\035\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\000\000\000\000\
\000\000\051\001\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\022\000\023\000\024\000\025\000\000\000\000\000\026\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\032\000\033\000\000\000\034\000\035\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\022\000\023\000\024\000\025\000\000\000\000\000\
\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\032\000\033\000\000\000\
\034\000\000\000\000\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\022\000\023\000\024\000\025\000\
\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\000\000\124\000\000\000\000\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\
\033\000\000\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\022\000\023\000\
\024\000\025\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\123\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\032\000\033\000\000\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\022\000\023\000\024\000\025\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\032\000\033\000\000\000\000\000\000\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000"

let yycheck = "\027\000\
\000\000\063\000\091\000\229\000\008\001\012\001\013\001\000\000\
\004\001\024\001\072\000\002\000\009\001\010\001\011\001\012\001\
\031\001\129\000\130\000\009\001\010\001\011\001\012\001\014\000\
\015\000\004\001\017\000\010\001\011\001\012\001\010\001\011\001\
\012\001\024\001\004\001\022\001\022\001\028\001\022\001\036\001\
\044\001\038\001\039\001\003\001\004\001\004\001\030\001\022\001\
\038\001\039\001\034\001\011\001\026\001\003\001\004\001\038\001\
\039\001\026\001\038\001\022\001\022\001\011\001\022\001\023\001\
\024\001\003\001\004\001\024\001\028\001\022\001\008\001\028\001\
\022\001\011\001\024\001\137\000\024\001\047\001\028\001\021\001\
\028\001\021\001\000\000\025\001\022\001\025\001\024\001\007\000\
\022\001\022\001\028\001\011\000\022\001\022\001\003\001\004\001\
\124\000\022\001\126\000\127\000\128\000\092\000\093\000\131\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\200\000\
\224\000\022\001\001\000\002\000\003\000\004\000\005\000\028\001\
\022\001\026\001\026\001\185\000\186\000\010\001\011\001\012\001\
\013\001\015\001\015\001\016\001\017\001\018\001\019\001\004\001\
\004\001\010\001\011\001\012\001\013\001\230\000\015\001\016\001\
\017\001\018\001\019\001\032\001\046\001\021\001\004\001\024\001\
\010\001\011\001\012\001\013\001\049\001\022\001\000\000\004\001\
\010\001\011\001\012\001\013\001\000\000\015\001\016\001\017\001\
\018\001\019\001\021\001\023\001\025\001\023\001\010\001\011\001\
\012\001\013\001\024\001\015\001\016\001\017\001\018\001\019\001\
\003\001\007\001\035\001\035\001\035\001\004\001\022\001\253\000\
\009\001\026\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\029\001\016\001\023\001\027\001\198\000\
\032\001\032\001\201\000\239\000\010\001\011\001\012\001\013\001\
\027\001\015\001\016\001\017\001\018\001\016\001\032\001\032\001\
\032\001\032\001\012\001\032\001\032\001\032\001\032\001\032\001\
\032\001\027\001\027\001\004\001\009\001\025\001\035\001\023\001\
\000\000\032\001\024\001\026\001\029\001\035\001\000\000\023\001\
\003\001\023\001\049\001\032\001\023\001\049\001\032\001\023\001\
\023\001\001\001\002\001\003\001\004\001\023\001\023\001\007\001\
\023\001\009\001\010\001\011\001\012\001\006\001\023\001\015\001\
\016\001\000\000\023\001\022\001\027\001\021\001\022\001\023\001\
\024\001\025\001\023\001\027\001\028\001\024\001\032\001\031\001\
\032\001\025\001\034\001\023\001\036\001\030\001\038\001\039\001\
\023\001\023\001\029\001\043\001\044\001\045\001\025\001\031\001\
\025\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\025\001\000\000\025\001\023\001\023\001\027\001\000\000\
\025\001\023\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\001\001\002\001\003\001\004\001\000\000\
\009\001\007\001\049\001\009\001\010\001\011\001\012\001\023\001\
\023\001\015\001\016\001\023\001\005\000\231\000\042\001\021\001\
\022\001\023\001\024\001\025\001\144\000\027\001\028\001\200\000\
\094\000\031\001\032\001\201\000\034\001\240\000\036\001\000\000\
\038\001\039\001\209\000\191\000\255\255\043\001\044\001\045\001\
\255\255\255\255\255\255\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\001\001\002\001\003\001\
\004\001\000\000\255\255\007\001\255\255\009\001\010\001\011\001\
\012\001\019\001\255\255\021\001\016\001\023\001\024\001\025\001\
\255\255\021\001\022\001\023\001\024\001\025\001\032\001\027\001\
\028\001\255\255\255\255\031\001\032\001\255\255\034\001\255\255\
\036\001\000\000\038\001\039\001\255\255\255\255\255\255\043\001\
\044\001\045\001\255\255\255\255\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\001\001\
\002\001\003\001\004\001\000\000\255\255\007\001\255\255\009\001\
\010\001\011\001\012\001\019\001\255\255\021\001\016\001\023\001\
\024\001\025\001\255\255\021\001\022\001\023\001\024\001\025\001\
\032\001\027\001\028\001\255\255\255\255\031\001\032\001\255\255\
\034\001\255\255\036\001\000\000\038\001\039\001\255\255\255\255\
\255\255\043\001\044\001\045\001\255\255\255\255\255\255\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\081\001\
\082\001\255\255\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\000\000\021\001\255\255\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\009\001\010\001\011\001\012\001\255\255\000\000\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\023\001\024\001\
\025\001\255\255\027\001\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\255\255\036\001\000\000\038\001\039\001\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\016\001\
\049\001\255\255\255\255\255\255\021\001\255\255\023\001\024\001\
\025\001\255\255\027\001\000\000\255\255\009\001\255\255\032\001\
\255\255\255\255\255\255\036\001\016\001\038\001\039\001\255\255\
\255\255\021\001\255\255\023\001\024\001\025\001\000\000\027\001\
\049\001\255\255\255\255\255\255\032\001\255\255\255\255\255\255\
\036\001\255\255\009\001\010\001\011\001\012\001\255\255\255\255\
\000\000\016\001\255\255\255\255\255\255\049\001\021\001\255\255\
\023\001\024\001\025\001\255\255\027\001\255\255\000\000\255\255\
\255\255\032\001\255\255\255\255\255\255\036\001\255\255\038\001\
\039\001\255\255\009\001\010\001\011\001\012\001\000\000\255\255\
\255\255\016\001\049\001\255\255\255\255\255\255\021\001\255\255\
\023\001\024\001\025\001\255\255\027\001\255\255\255\255\009\001\
\255\255\032\001\255\255\255\255\255\255\036\001\016\001\038\001\
\039\001\255\255\255\255\021\001\255\255\023\001\024\001\025\001\
\255\255\027\001\049\001\255\255\255\255\255\255\032\001\255\255\
\255\255\255\255\036\001\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\049\001\
\021\001\255\255\023\001\024\001\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\032\001\255\255\255\255\255\255\036\001\
\255\255\038\001\039\001\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\016\001\049\001\255\255\255\255\255\255\
\021\001\255\255\023\001\024\001\025\001\255\255\027\001\255\255\
\255\255\009\001\255\255\032\001\255\255\255\255\255\255\036\001\
\016\001\038\001\039\001\255\255\255\255\021\001\016\001\023\001\
\024\001\025\001\255\255\027\001\049\001\023\001\024\001\025\001\
\032\001\027\001\255\255\255\255\036\001\255\255\032\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\255\255\016\001\255\255\255\255\255\255\049\001\
\021\001\255\255\023\001\024\001\025\001\255\255\027\001\010\001\
\011\001\012\001\013\001\032\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\255\255\049\001\032\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\024\001\025\001\028\000\029\000\255\255\
\010\001\011\001\255\255\032\001\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\023\001\024\001\025\001\
\255\255\255\255\010\001\011\001\255\255\255\255\032\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\069\000\255\255\
\032\001\019\001\073\000\021\001\255\255\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\255\255\019\001\255\255\021\001\255\255\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\255\255\104\000\255\255\106\000\255\255\255\255\255\255\255\255\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\122\000\123\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\132\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\161\000\255\255\163\000\164\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\189\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\203\000\255\255\205\000\255\255\
\255\255\255\255\255\255\255\255\211\000\212\000\213\000\214\000\
\215\000\216\000\217\000\218\000\219\000\220\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\228\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\255\255\255\255\254\000\
\011\001\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\007\001\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\018\001\255\255\020\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\028\001\255\255\255\255\
\043\001\044\001\045\001\255\255\047\001\048\001\255\255\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\001\001\002\001\003\001\004\001\255\255\255\255\007\001\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\045\001\255\255\047\001\048\001\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\001\001\002\001\003\001\004\001\255\255\255\255\
\007\001\255\255\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\028\001\255\255\255\255\
\255\255\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\044\001\045\001\255\255\
\047\001\255\255\255\255\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\001\001\002\001\003\001\004\001\
\255\255\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\255\255\031\001\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\044\001\
\045\001\255\255\255\255\255\255\255\255\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\044\001\045\001\255\255\255\255\255\255\255\255\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\001\001\002\001\003\001\004\001\255\255\255\255\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\045\001\255\255\255\255\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001"

let yynames_const = "\
  TRUTH\000\
  FALSITY\000\
  LET\000\
  EQ\000\
  PLUS\000\
  MINUS\000\
  MULTIPLY\000\
  DIVIDE\000\
  UMINUS\000\
  LANGLE\000\
  RANGLE\000\
  LANGLE_EQ\000\
  RANGLE_EQ\000\
  LONG_EQ\000\
  NEWLINE\000\
  EOF\000\
  SEMICOLLON\000\
  LPARAN\000\
  RPARAN\000\
  LBRACE\000\
  RBRACE\000\
  LSQBR\000\
  RSQBR\000\
  IF\000\
  ELSE\000\
  FN\000\
  ARROW\000\
  COMMA\000\
  CALL\000\
  INT_T\000\
  COLLON\000\
  TYPE_HINT\000\
  AT\000\
  PROPAND\000\
  PROPOR\000\
  PROP_IMPLICATION\000\
  PROPEQ\000\
  FATARROW\000\
  TOTAL\000\
  DIVERGENT\000\
  MAX_COMP_KIND\000\
  FORALL\000\
  SLASH\000\
  DOT\000\
  PROPOSITION\000\
  TYPE\000\
  PRE_TYPE\000\
  KIND\000\
  COMPUTATION_KIND\000\
  PREDICATE\000\
  TYPE_BUILDER\000\
  QUIT\000\
  RESET\000\
  AXIOM\000\
  TC_IR_TERM\000\
  IR_DEFINITION\000\
  IR_PRINT_DEFINITION\000\
  IR_IS_CONV\000\
  IR_SIMPL\000\
  IR_LOAD_MOD\000\
  REC\000\
  AND_INTRO\000\
  OR_INTRO_L\000\
  OR_INTRO_R\000\
  AND_ELIM_L\000\
  AND_ELIM_R\000\
  OR_ELIM\000\
  EQ_INTRO\000\
  EQ_ELIM\000\
  FALSE_ELIM_PROP\000\
  FALSE_ELIM_TYPE\000\
  FN_PTR_TYPE\000\
  DEREF_FN_PTR\000\
  PROOF_OF_TRUTH\000\
  BOOL_TRUE\000\
  BOOL_FALSE\000\
  BOOL_TYPE\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  SPECIAL_IDENT\000\
  COMMENT\000\
  FN_PTR\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.item list) in
    Obj.repr(
# 63 "ast.mly"
                    ( (RustTerm.Comment _1) :: _2 )
# 870 "ast.ml"
               : RustTerm.item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fn_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.item list) in
    Obj.repr(
# 64 "ast.mly"
                   ( _1 :: _2 )
# 878 "ast.ml"
               : RustTerm.item list))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "ast.mly"
      ( [] )
# 884 "ast.ml"
               : RustTerm.item list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fn_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 68 "ast.mly"
                                       ( RustTerm.FnDef { name = _2; args = _4; ret_type = Unit; body = _6 } )
# 893 "ast.ml"
               : 'fn_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fn_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 69 "ast.mly"
                                                 ( RustTerm.FnDef { name = _2; args = _4; ret_type = _7; body = _8 } )
# 903 "ast.ml"
               : 'fn_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fn_args_sub) in
    Obj.repr(
# 72 "ast.mly"
              ( _1 )
# 910 "ast.ml"
               : 'fn_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "ast.mly"
  ( [] )
# 916 "ast.ml"
               : 'fn_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fn_arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fn_args_sub) in
    Obj.repr(
# 75 "ast.mly"
                           ( _1 :: _3 )
# 924 "ast.ml"
               : 'fn_args_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fn_arg) in
    Obj.repr(
# 76 "ast.mly"
         ( _1 :: [] )
# 931 "ast.ml"
               : 'fn_args_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 78 "ast.mly"
                   ( (_1, _3) )
# 939 "ast.ml"
               : 'fn_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "ast.mly"
                ( Unit )
# 945 "ast.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "ast.mly"
        ( Int )
# 951 "ast.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'maybe_typs) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 82 "ast.mly"
                                        ( RustTerm.Fn (_3, _6) )
# 959 "ast.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 85 "ast.mly"
       ( _1 )
# 966 "ast.ml"
               : 'maybe_typs))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "ast.mly"
  ( [] )
# 972 "ast.ml"
               : 'maybe_typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 89 "ast.mly"
                 ( _1 :: _3 )
# 980 "ast.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 90 "ast.mly"
      ( _1 :: [] )
# 987 "ast.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 93 "ast.mly"
                          ( RustTerm.Let (_2, _4) )
# 995 "ast.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 94 "ast.mly"
             ( Expr _1 )
# 1002 "ast.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 96 "ast.mly"
                                  ( _1 :: _3 )
# 1010 "ast.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 97 "ast.mly"
            ( [_1] )
# 1017 "ast.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 98 "ast.mly"
                       ( [_1; RustTerm.Expr RustTerm.Nil] )
# 1024 "ast.ml"
               : 'statements))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "ast.mly"
  ( [] )
# 1030 "ast.ml"
               : 'maybe_statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 101 "ast.mly"
             ( _1 )
# 1037 "ast.ml"
               : 'maybe_statements))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'maybe_statements) in
    Obj.repr(
# 103 "ast.mly"
                                 ( _2 )
# 1044 "ast.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "ast.mly"
                ( RustTerm.Nil )
# 1050 "ast.ml"
               : 'atom_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "ast.mly"
        ( RustTerm.Variable _1 )
# 1057 "ast.ml"
               : 'atom_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "ast.mly"
      ( RustTerm.NumConst (int_of_string _1) )
# 1064 "ast.ml"
               : 'atom_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifthenelse) in
    Obj.repr(
# 108 "ast.mly"
             ( _1 )
# 1071 "ast.ml"
               : 'atom_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'atom_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'maybe_expressions) in
    Obj.repr(
# 109 "ast.mly"
                                                  ( RustTerm.Call (_1, _3) )
# 1079 "ast.ml"
               : 'atom_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : RustTerm.expr) in
    Obj.repr(
# 110 "ast.mly"
                           ( _2 )
# 1086 "ast.ml"
               : 'atom_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom_expression) in
    Obj.repr(
# 112 "ast.mly"
                  ( _1 )
# 1093 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 113 "ast.mly"
                             ( RustTerm.Add (_1, _3) )
# 1101 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 114 "ast.mly"
                              ( RustTerm.Sub (_1, _3) )
# 1109 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_expression) in
    Obj.repr(
# 115 "ast.mly"
                                      ( RustTerm.Multiply (_1, _3) )
# 1117 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 116 "ast.mly"
                               ( RustTerm.Divide (_1, _3) )
# 1125 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 117 "ast.mly"
                               ( RustTerm.Less (_1, _3) )
# 1133 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 118 "ast.mly"
                               ( RustTerm.Greater (_1, _3) )
# 1141 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 119 "ast.mly"
                                  ( RustTerm.LessEqual (_1, _3) )
# 1149 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 120 "ast.mly"
                                  ( RustTerm.GreaterEqual (_1, _3) )
# 1157 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 121 "ast.mly"
                                ( RustTerm.Equal (_1, _3) )
# 1165 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 122 "ast.mly"
                                ( RustTerm.Negotiate _2 )
# 1172 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 123 "ast.mly"
        ( RustTerm.Block _1 )
# 1179 "ast.ml"
               : RustTerm.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "ast.mly"
  ( [] )
# 1185 "ast.ml"
               : 'maybe_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expressions) in
    Obj.repr(
# 127 "ast.mly"
              ( _1 )
# 1192 "ast.ml"
               : 'maybe_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressions) in
    Obj.repr(
# 129 "ast.mly"
                               ( _1 :: _3 )
# 1200 "ast.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : RustTerm.expr) in
    Obj.repr(
# 130 "ast.mly"
             ( _1 :: [] )
# 1207 "ast.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'ifthenelse) in
    Obj.repr(
# 133 "ast.mly"
                                      ( RustTerm.IfThenElse (_2, _3, [RustTerm.Expr _5]) )
# 1216 "ast.ml"
               : 'ifthenelse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 134 "ast.mly"
                                 ( RustTerm.IfThenElse (_2, _3, _5) )
# 1225 "ast.ml"
               : 'ifthenelse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : RustTerm.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 135 "ast.mly"
                      ( RustTerm.IfThen (_2, _3) )
# 1233 "ast.ml"
               : 'ifthenelse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 164 "ast.mly"
         ( _1 :: [] )
# 1240 "ast.ml"
               : 'ptr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ptr_list) in
    Obj.repr(
# 165 "ast.mly"
                        ( _1 :: _3 )
# 1248 "ast.ml"
               : 'ptr_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 167 "ast.mly"
                                                         ( IrTerm.BoolRec (_3, _5, _7, IrTerm.Nil) )
# 1257 "ast.ml"
               : 'conditional_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : IrTerm.term) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : IrTerm.term) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 168 "ast.mly"
                                                                                    ( IrTerm.BoolRec (_3, _5, _7, _11) )
# 1267 "ast.ml"
               : 'conditional_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : IrTerm.term) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_ir_term) in
    Obj.repr(
# 169 "ast.mly"
                                                                                  ( IrTerm.BoolRec (_3, _5, _7, _10) )
# 1277 "ast.ml"
               : 'conditional_ir_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 170 "ast.mly"
                                   ( IrTerm.BoolRecIndep (_2, _4, IrTerm.Nil) )
# 1285 "ast.ml"
               : 'conditional_ir_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : IrTerm.term) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : IrTerm.term) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 171 "ast.mly"
                                                              ( IrTerm.BoolRecIndep (_2, _4, _8) )
# 1294 "ast.ml"
               : 'conditional_ir_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : IrTerm.term) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_ir_term) in
    Obj.repr(
# 172 "ast.mly"
                                                            ( IrTerm.BoolRecIndep (_2, _4, _7) )
# 1303 "ast.ml"
               : 'conditional_ir_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 174 "ast.mly"
                        ( _2 )
# 1310 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "ast.mly"
        ( IrTerm.Var _1 )
# 1317 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "ast.mly"
        ( IrTerm.Total )
# 1323 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "ast.mly"
            ( IrTerm.Divergent )
# 1329 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "ast.mly"
        ( IrTerm.IntegerType )
# 1335 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 179 "ast.mly"
      ( IrTerm.IntegerConst (int_of_string _1) )
# 1342 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 180 "ast.mly"
         ( IrTerm.FunctionPointer _1 )
# 1349 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "ast.mly"
              ( IrTerm.Proposition )
# 1355 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "ast.mly"
       ( IrTerm.Type )
# 1361 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "ast.mly"
           ( IrTerm.PreType )
# 1367 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 184 "ast.mly"
                       ( IrTerm.Kind (int_of_string _3) )
# 1374 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "ast.mly"
                   ( IrTerm.ComputationKind )
# 1380 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "ast.mly"
            ( IrTerm.Predicate )
# 1386 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "ast.mly"
               ( IrTerm.TypeBuilder )
# 1392 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'atom_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 188 "ast.mly"
                                     ( IrTerm.ComputationType (_1, _3) )
# 1400 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ptr_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 189 "ast.mly"
                                           ( IrTerm.Recursion (_3, int_of_string _6) )
# 1408 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 190 "ast.mly"
                                                    ( IrTerm.MaxEffect (_3, _5) )
# 1416 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 191 "ast.mly"
                                                ( IrTerm.AndIntroduction (_3, _5) )
# 1424 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 192 "ast.mly"
                                                 ( IrTerm.OrIntroductionL (_3, _5) )
# 1432 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 193 "ast.mly"
                                                 ( IrTerm.OrIntroductionR (_3, _5) )
# 1440 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 194 "ast.mly"
                                                 ( IrTerm.AndEliminationL (_3, _5) )
# 1448 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 195 "ast.mly"
                                                 ( IrTerm.AndEliminationR (_3, _5) )
# 1456 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 196 "ast.mly"
                                               ( IrTerm.EqIntro (_3, _5) )
# 1464 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 197 "ast.mly"
                                                            ( IrTerm.OrElimination (_3, _5, _7) )
# 1473 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 198 "ast.mly"
                                  ( IrTerm.FnPtrType _3 )
# 1480 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 199 "ast.mly"
                                   ( IrTerm.DerefFnPtr _3 )
# 1487 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "ast.mly"
        ( IrTerm.Truth )
# 1493 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "ast.mly"
                 ( IrTerm.ProofOfTruth )
# 1499 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "ast.mly"
          ( IrTerm.Falsity )
# 1505 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 203 "ast.mly"
                                                            ( IrTerm.EqElim (_3, _5, _7) )
# 1514 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 204 "ast.mly"
                                                      ( IrTerm.FalsityEliminationProposition (_3, _5) )
# 1522 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : IrTerm.term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 205 "ast.mly"
                                                      ( IrTerm.FalsityEliminationType (_3, _5) )
# 1530 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "ast.mly"
            ( IrTerm.True )
# 1536 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 207 "ast.mly"
             ( IrTerm.False )
# 1542 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "ast.mly"
            ( IrTerm.Bool )
# 1548 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_ir_term) in
    Obj.repr(
# 209 "ast.mly"
                      ( _1 )
# 1555 "ast.ml"
               : 'atom_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_ir_term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atom_ir_term) in
    Obj.repr(
# 211 "ast.mly"
                           ( IrTerm.App (_1, _2) )
# 1563 "ast.ml"
               : 'app_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom_ir_term) in
    Obj.repr(
# 212 "ast.mly"
               ( _1 )
# 1570 "ast.ml"
               : 'app_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_ir_term) in
    Obj.repr(
# 214 "ast.mly"
              ( _1 )
# 1577 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ir_term) in
    Obj.repr(
# 215 "ast.mly"
                                   ( IrTerm.Opposite _2 )
# 1584 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ir_term) in
    Obj.repr(
# 216 "ast.mly"
                                   ( IrTerm.Add (_1, _3) )
# 1592 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ir_term) in
    Obj.repr(
# 217 "ast.mly"
                                    ( IrTerm.Subtract (_1, _3) )
# 1600 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_ir_term) in
    Obj.repr(
# 218 "ast.mly"
                                     ( IrTerm.Multiply (_1, _3) )
# 1608 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ir_term) in
    Obj.repr(
# 219 "ast.mly"
                                     ( IrTerm.Or (_1, _3) )
# 1616 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_ir_term) in
    Obj.repr(
# 220 "ast.mly"
                                    ( IrTerm.And (_1, _3) )
# 1624 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : IrTerm.term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ir_term) in
    Obj.repr(
# 221 "ast.mly"
                                                             ( IrTerm.Product (_2, _4, _6) )
# 1633 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ir_term) in
    Obj.repr(
# 222 "ast.mly"
                                                         ( IrTerm.Product ("_", _1, _3) )
# 1641 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'arith_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'arith_ir_term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'app_ir_term) in
    Obj.repr(
# 223 "ast.mly"
                                                       ( IrTerm.Eq (_1, _3, _5) )
# 1650 "ast.ml"
               : 'arith_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ir_term) in
    Obj.repr(
# 225 "ast.mly"
                ( _1 )
# 1657 "ast.ml"
               : 'abs_ir_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : IrTerm.term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'abs_ir_term) in
    Obj.repr(
# 226 "ast.mly"
                                             ( IrTerm.Abs (_2, _4, _6) )
# 1666 "ast.ml"
               : 'abs_ir_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_ir_term) in
    Obj.repr(
# 228 "ast.mly"
              ( _1 )
# 1673 "ast.ml"
               : IrTerm.term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'abs_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : IrTerm.term) in
    Obj.repr(
# 229 "ast.mly"
                                 ( IrTerm.Sequence (_1, _3) )
# 1681 "ast.ml"
               : IrTerm.term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : IrTerm.term) in
    Obj.repr(
# 232 "ast.mly"
                                     ( (_2, _4) )
# 1689 "ast.ml"
               : 'def_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def_arg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'def_args) in
    Obj.repr(
# 234 "ast.mly"
                   ( _1 :: _2 )
# 1697 "ast.ml"
               : 'def_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def_arg) in
    Obj.repr(
# 235 "ast.mly"
          ( _1 :: [] )
# 1704 "ast.ml"
               : 'def_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "ast.mly"
       ( TopCmd.Quit )
# 1710 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "ast.mly"
        ( TopCmd.Reset )
# 1716 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : IrTerm.term) in
    Obj.repr(
# 239 "ast.mly"
                             ( TopCmd.Axiom (_2, _4) )
# 1724 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : IrTerm.term) in
    Obj.repr(
# 240 "ast.mly"
                     ( TopCmd.TcIrTerm _2 )
# 1731 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'def_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : IrTerm.term) in
    Obj.repr(
# 241 "ast.mly"
                                          ( TopCmd.IrDefinition(_2, _3, _5) )
# 1740 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 242 "ast.mly"
                            ( TopCmd.IrPrintDef _2 )
# 1747 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atom_ir_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_ir_term) in
    Obj.repr(
# 243 "ast.mly"
                                       ( TopCmd.IrIsConv (_2, _3) )
# 1755 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : IrTerm.term) in
    Obj.repr(
# 244 "ast.mly"
                   ( TopCmd.IrSimpl _2 )
# 1762 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 245 "ast.mly"
                     ( TopCmd.IrLoadModule _2 )
# 1769 "ast.ml"
               : 'toplevel_precommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel_precommand) in
    Obj.repr(
# 247 "ast.mly"
                          ( _1 )
# 1776 "ast.ml"
               : TopCmd.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : TopCmd.command) in
    Obj.repr(
# 249 "ast.mly"
                   ( Some _1 )
# 1783 "ast.ml"
               : TopCmd.command option))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "ast.mly"
      ( None )
# 1789 "ast.ml"
               : TopCmd.command option))
(* Entry rust_file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry ir_term *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry toplevel_command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry maybe_toplevel_command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let rust_file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : RustTerm.item list)
let expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : RustTerm.expr)
let ir_term (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : IrTerm.term)
let toplevel_command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : TopCmd.command)
let maybe_toplevel_command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : TopCmd.command option)
