# This configuration file was generated by running:
# C:\Coq\bin\coq_makefile.exe -f Make -o Makefile.coq


###############################################################################
#                                                                             #
# Project files.                                                              #
#                                                                             #
###############################################################################

COQMF_VFILES = MyList.v ListType.v Names.v MlTypes.v Termes.v Conv.v Types.v Conv_Dec.v Class.v Can.v Int_term.v Int_typ.v Int_stab.v Strong_Norm.v Consistency.v Infer.v Expr.v Machine.v Ered.v ETypes.v Equiv.v
COQMF_MLIFILES = 
COQMF_MLFILES = 
COQMF_MLGFILES = 
COQMF_MLPACKFILES = 
COQMF_MLLIBFILES = 
COQMF_CMDLINE_VFILES = 

###############################################################################
#                                                                             #
# Path directives (-I, -R, -Q).                                               #
#                                                                             #
###############################################################################

COQMF_OCAMLLIBS = 
COQMF_SRC_SUBDIRS = 
COQMF_COQLIBS =   -R . CoqInCoq
COQMF_COQLIBS_NOML =  -R . CoqInCoq
COQMF_CMDLINE_COQLIBS =   

###############################################################################
#                                                                             #
# Coq configuration.                                                          #
#                                                                             #
###############################################################################

COQMF_LOCAL=0
COQMF_COQLIB=C:\Coq/lib/coq/
COQMF_DOCDIR=C:\Coq/doc/
COQMF_OCAMLFIND=C:\cygwin64\bin/ocamlfind.exe
COQMF_CAMLFLAGS=-thread -rectypes -w +a-4-9-27-41-42-44-45-48-58   -safe-string -strict-sequence
COQMF_WARN=-warn-error +a-3
COQMF_HASNATDYNLINK=true
COQMF_COQ_SRC_SUBDIRS=config lib clib kernel library engine pretyping interp gramlib gramlib/.pack parsing proofs tactics toplevel printing ide stm vernac plugins/btauto plugins/cc plugins/derive plugins/extraction plugins/firstorder plugins/fourier plugins/funind plugins/ltac plugins/micromega plugins/nsatz plugins/omega plugins/rtauto plugins/setoid_ring plugins/ssr plugins/ssrmatching plugins/syntax
COQMF_WINDRIVE=

###############################################################################
#                                                                             #
# Extra variables.                                                            #
#                                                                             #
###############################################################################

CAML = $(CAMLOPTC) $(PP)
COQE = $(COQBIN)coqtop $(COQLIBS) $(COQFLAGS) -batch -load-vernac-source
COQMF_OTHERFLAGS = 
COQMF_INSTALLCOQDOCROOT = CoqInCoq

###############################################################################
#                                                                             #
# Extra targets. (-extra and -extra-phony, DEPRECATED)                        #
#                                                                             #
###############################################################################

post-all::
	$(MAKE) -f $(SELF) top.cmx
clean::
	rm -f top.cmx
top.cmx :  top.ml core.cmx topParser.cmx
	$(CAML) $<

post-all::
	$(MAKE) -f $(SELF) core.cmi
clean::
	rm -f core.cmi
core.cmi :  core.mli
	$(CAMLOPTC) $<

post-all::
	$(MAKE) -f $(SELF) core.cmx
clean::
	rm -f core.cmx
core.cmx :  core.ml core.cmi
	$(CAMLOPTC) $<

post-all::
	$(MAKE) -f $(SELF) lambdaAst.cmi
clean::
	rm -f lambdaAst.cmi
lambdaAst.cmi :  lambdaAst.mli
	$(CAMLOPTC) $<

post-all::
	$(MAKE) -f $(SELF) lambdaAst.cmx
clean::
	rm -f lambdaAst.cmx
lambdaAst.cmx :  lambdaAst.ml lambdaAst.cmi core.cmx
	$(CAMLOPTC) $<

post-all::
	$(MAKE) -f $(SELF) lambdaLex.cmx
clean::
	rm -f lambdaLex.cmx
lambdaLex.cmx :  lambdaLex.ml core.cmx lambdaAst.cmx
	$(CAML) $<

post-all::
	$(MAKE) -f $(SELF) topParser.cmx
clean::
	rm -f topParser.cmx
topParser.cmx :  topParser.ml lambdaAst.cmx lambdaLex.cmx
	$(CAML) $<

post-all::
	$(MAKE) -f $(SELF) core.ml core.mli
clean::
	rm -f core.ml core.mli
core.ml core.mli :  Extract.v Machine.vo
	$(COQE) $<

post-all::
	$(MAKE) -f $(SELF) coc
clean::
	rm -f coc
coc :  core.cmx lambdaAst.cmx lambdaLex.cmx topParser.cmx top.cmx
	$(CAMLOPTLINK) -o $@ $^

.PHONY: test
test :  coc
	@echo '***** test: checking the proof of the Newman lemma *****'
	./coc < newman.coc
	@echo '******************** End of test ***********************'

.PHONY: custom-all
custom-all :  test
	

