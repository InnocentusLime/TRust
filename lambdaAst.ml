type token =
  | LEMMA
  | WILDCARD
  | EOF
  | COMMA
  | INT of (int)
  | ARROW
  | VAR of (string)
  | COLLON
  | LBRACE
  | RBRACE
  | LPARAN
  | RPARAN
  | ZERO
  | SUCC
  | NIL
  | TRUE
  | FALSE
  | FOR
  | IF
  | THEN
  | ELSE
  | DO
  | SLASH
  | FORALL
  | EXISTS
  | EQ
  | PROP_AND
  | PROP_OR
  | PROP_IMPLIES
  | TOP
  | BOT
  | DOT
  | TYPE_HINT
  | UNIT
  | BOOL
  | NAT
  | FAT_ARROW
  | GENERIC_TYPE
  | ARROW_TYPE
  | REFINED_TYPE
  | BAR
  | LSQ
  | RSQ
  | PROD
  | LANGLE
  | RANGLE

open Parsing;;
let _ = parse_error;;
# 2 "lambdaAst.mly"
open PreIr;;
# 54 "lambdaAst.ml"
let yytransl_const = [|
  257 (* LEMMA *);
  258 (* WILDCARD *);
    0 (* EOF *);
  259 (* COMMA *);
  261 (* ARROW *);
  263 (* COLLON *);
  264 (* LBRACE *);
  265 (* RBRACE *);
  266 (* LPARAN *);
  267 (* RPARAN *);
  268 (* ZERO *);
  269 (* SUCC *);
  270 (* NIL *);
  271 (* TRUE *);
  272 (* FALSE *);
  273 (* FOR *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* DO *);
  278 (* SLASH *);
  279 (* FORALL *);
  280 (* EXISTS *);
  281 (* EQ *);
  282 (* PROP_AND *);
  283 (* PROP_OR *);
  284 (* PROP_IMPLIES *);
  285 (* TOP *);
  286 (* BOT *);
  287 (* DOT *);
  288 (* TYPE_HINT *);
  289 (* UNIT *);
  290 (* BOOL *);
  291 (* NAT *);
  292 (* FAT_ARROW *);
  293 (* GENERIC_TYPE *);
  294 (* ARROW_TYPE *);
  295 (* REFINED_TYPE *);
  296 (* BAR *);
  297 (* LSQ *);
  298 (* RSQ *);
  299 (* PROD *);
  300 (* LANGLE *);
  301 (* RANGLE *);
    0|]

let yytransl_block = [|
  260 (* INT *);
  262 (* VAR *);
    0|]

let yylhs = "\255\255\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\010\000\010\000\010\000\010\000\010\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\011\000\
\011\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\008\000\
\008\000\008\000\008\000\012\000\012\000\012\000\012\000\001\000\
\002\000\003\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\003\000\003\000\003\000\001\000\006\000\
\006\000\004\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\001\000\001\000\001\000\001\000\003\000\
\001\000\003\000\007\000\004\000\007\000\004\000\001\000\003\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\013\000\012\000\010\000\009\000\006\000\
\006\000\005\000\005\000\006\000\005\000\006\000\005\000\002\000\
\002\000\004\000\004\000\001\000\001\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\035\000\036\000\
\034\000\038\000\037\000\000\000\000\000\000\000\067\000\000\000\
\000\000\023\000\000\000\000\000\000\000\021\000\020\000\022\000\
\068\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\001\000\002\000\069\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\042\000\000\000\
\000\000\000\000\024\000\000\000\026\000\000\000\000\000\033\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\062\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\027\000\000\000\000\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\045\000\000\000\044\000"

let yydgoto = "\004\000\
\015\000\025\000\035\000\036\000\037\000\054\000\038\000\039\000\
\040\000\027\000\028\000\048\000"

let yysindex = "\237\000\
\072\002\117\255\066\001\000\000\000\000\002\255\000\000\000\000\
\000\000\000\000\000\000\072\002\072\002\072\002\000\000\005\000\
\015\255\000\000\019\255\241\000\022\255\000\000\000\000\000\000\
\000\000\002\000\253\254\000\000\066\001\189\255\057\255\067\255\
\000\000\000\000\000\000\090\000\000\000\088\001\214\001\058\255\
\228\001\250\001\059\255\056\255\016\255\158\255\052\001\044\255\
\000\000\094\255\066\001\110\255\119\255\025\255\082\255\000\000\
\117\255\021\255\131\255\110\001\064\255\121\255\138\255\184\255\
\045\255\146\255\000\000\066\001\066\001\066\001\214\255\002\255\
\132\255\214\255\002\255\132\255\002\255\000\000\000\000\179\255\
\066\001\186\255\066\001\072\002\072\002\000\000\000\000\042\255\
\117\255\117\255\000\000\117\255\000\000\117\255\253\254\000\000\
\000\000\117\255\117\255\154\255\167\255\117\255\066\001\117\255\
\000\000\190\255\139\255\000\000\167\000\060\255\124\001\008\002\
\171\255\111\255\154\001\038\002\180\255\184\001\051\002\193\255\
\072\002\208\255\072\002\225\255\000\000\000\000\000\000\004\255\
\173\255\213\255\254\254\006\255\199\255\002\255\017\255\231\255\
\041\255\119\255\000\000\117\255\117\255\117\255\000\000\117\255\
\117\255\117\255\117\255\117\255\117\255\048\255\222\255\072\255\
\235\255\066\001\245\255\199\255\002\255\000\000\228\001\085\002\
\000\000\066\001\066\001\213\255\213\255\213\255\213\255\213\255\
\213\255\213\255\213\255\213\255\248\255\251\255\240\255\009\000\
\075\255\117\255\000\000\228\001\085\002\000\000\231\255\231\255\
\072\002\072\002\012\000\072\002\000\000\000\000\090\255\106\255\
\072\002\115\255\000\000\015\000\124\255\244\255\072\002\000\000\
\017\000\125\255\072\002\000\000\150\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\243\255\253\255\000\000\
\000\000\000\000\000\000\000\000\251\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\212\000\000\000\000\000\255\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\093\000\096\000\032\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\032\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\172\255\177\255\
\000\000\000\000\000\000\039\000\042\000\045\000\050\000\053\000\
\074\000\082\000\085\000\088\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\182\255\185\255\000\000\013\000\114\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\079\000\000\000\065\001\020\000\035\000\
\122\001\224\000\240\000\161\000"

let yytablesize = 894
let yytable = "\023\000\
\025\000\056\000\057\000\032\000\049\000\023\000\028\000\005\000\
\057\000\010\000\057\000\006\000\008\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\016\000\057\000\051\000\030\000\
\052\000\041\000\018\000\055\000\156\000\057\000\094\000\044\000\
\045\000\046\000\082\000\091\000\157\000\023\000\011\000\058\000\
\042\000\012\000\014\000\154\000\013\000\057\000\050\000\162\000\
\047\000\014\000\127\000\102\000\015\000\022\000\023\000\024\000\
\173\000\073\000\076\000\083\000\073\000\076\000\065\000\060\000\
\057\000\073\000\076\000\068\000\069\000\079\000\139\000\163\000\
\066\000\016\000\079\000\103\000\080\000\070\000\050\000\076\000\
\175\000\017\000\077\000\189\000\018\000\086\000\050\000\019\000\
\077\000\067\000\041\000\111\000\005\000\041\000\115\000\006\000\
\118\000\087\000\195\000\081\000\068\000\069\000\050\000\046\000\
\046\000\042\000\112\000\059\000\042\000\116\000\070\000\119\000\
\092\000\009\000\196\000\057\000\089\000\017\000\047\000\047\000\
\050\000\143\000\018\000\198\000\019\000\090\000\020\000\098\000\
\041\000\088\000\073\000\076\000\200\000\204\000\073\000\076\000\
\050\000\073\000\076\000\021\000\150\000\097\000\152\000\042\000\
\099\000\050\000\105\000\106\000\107\000\022\000\023\000\024\000\
\104\000\159\000\050\000\050\000\068\000\069\000\206\000\122\000\
\084\000\124\000\050\000\005\000\068\000\069\000\070\000\071\000\
\160\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\180\000\057\000\073\000\076\000\050\000\136\000\051\000\155\000\
\133\000\100\000\121\000\050\000\050\000\101\000\062\000\181\000\
\048\000\123\000\063\000\049\000\051\000\134\000\014\000\073\000\
\076\000\050\000\142\000\051\000\191\000\192\000\048\000\194\000\
\050\000\049\000\064\000\146\000\197\000\048\000\017\000\068\000\
\049\000\057\000\202\000\108\000\030\000\019\000\205\000\109\000\
\149\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\177\000\068\000\069\000\030\000\021\000\001\000\002\000\003\000\
\183\000\184\000\174\000\070\000\125\000\126\000\022\000\023\000\
\024\000\178\000\068\000\069\000\151\000\176\000\014\000\185\000\
\068\000\069\000\186\000\187\000\070\000\025\000\057\000\201\000\
\032\000\025\000\070\000\025\000\032\000\153\000\032\000\028\000\
\188\000\028\000\010\000\193\000\010\000\008\000\199\000\008\000\
\203\000\095\000\025\000\025\000\061\000\032\000\032\000\025\000\
\028\000\028\000\032\000\050\000\025\000\028\000\060\000\032\000\
\025\000\096\000\028\000\032\000\000\000\025\000\028\000\011\000\
\032\000\011\000\012\000\028\000\012\000\013\000\010\000\013\000\
\000\000\008\000\014\000\000\000\014\000\015\000\000\000\015\000\
\011\000\011\000\026\000\012\000\012\000\000\000\013\000\013\000\
\000\000\000\000\011\000\014\000\014\000\012\000\015\000\015\000\
\013\000\000\000\016\000\011\000\016\000\014\000\012\000\000\000\
\015\000\013\000\017\000\000\000\017\000\018\000\014\000\018\000\
\019\000\015\000\019\000\016\000\016\000\005\000\000\000\005\000\
\006\000\000\000\006\000\017\000\017\000\016\000\018\000\018\000\
\000\000\019\000\019\000\068\000\069\000\017\000\016\000\005\000\
\018\000\093\000\009\000\019\000\009\000\070\000\017\000\043\000\
\005\000\018\000\000\000\006\000\019\000\000\000\000\000\110\000\
\000\000\005\000\114\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
\000\000\128\000\129\000\000\000\130\000\000\000\009\000\000\000\
\000\000\000\000\131\000\132\000\000\000\000\000\135\000\017\000\
\137\000\000\000\000\000\000\000\138\000\000\000\019\000\000\000\
\109\000\000\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\000\000\000\000\030\000\021\000\000\000\000\000\
\043\000\113\000\000\000\043\000\117\000\000\000\120\000\022\000\
\023\000\024\000\000\000\000\000\164\000\165\000\166\000\014\000\
\167\000\168\000\169\000\170\000\171\000\172\000\056\000\000\000\
\000\000\056\000\000\000\000\000\000\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\043\000\000\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\000\000\017\000\190\000\056\000\000\000\000\000\053\000\000\000\
\019\000\000\000\020\000\000\000\056\000\056\000\158\000\161\000\
\000\000\057\000\000\000\000\000\057\000\000\000\000\000\021\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\022\000\023\000\024\000\000\000\179\000\182\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\023\000\039\000\000\000\057\000\
\057\000\039\000\023\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\005\000\000\000\000\000\000\000\074\000\039\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\005\000\
\039\000\000\000\023\000\029\000\000\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\030\000\
\031\000\032\000\000\000\000\000\014\000\005\000\033\000\034\000\
\000\000\071\000\000\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\014\000\000\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\005\000\000\000\000\000\050\000\074\000\
\078\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\005\000\000\000\000\000\000\000\071\000\075\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\000\000\000\000\050\000\140\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\071\000\014\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\144\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\071\000\014\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\147\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\074\000\
\014\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\000\000\005\000\000\000\000\000\000\000\071\000\075\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\005\000\
\000\000\000\000\050\000\074\000\078\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\005\000\000\000\000\000\
\000\000\074\000\000\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\141\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\074\000\
\014\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\005\000\000\000\000\000\000\000\074\000\000\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\145\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\014\000\000\000\
\000\000\006\000\148\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\005\000\014\000\000\000\000\000\074\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000"

let yycheck = "\005\001\
\000\000\000\000\005\001\000\000\000\000\011\001\000\000\006\001\
\005\001\000\000\005\001\010\001\000\000\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\001\000\005\001\008\001\022\001\
\006\001\006\000\006\001\006\001\031\001\005\001\010\001\012\000\
\013\000\014\000\019\001\011\001\031\001\043\001\000\000\043\001\
\006\000\000\000\041\001\040\001\000\000\005\001\031\001\031\001\
\014\000\000\000\009\001\007\001\000\000\033\001\034\001\035\001\
\009\001\038\000\039\000\044\001\041\000\042\000\006\001\029\000\
\005\001\046\000\047\000\026\001\027\001\011\001\011\001\031\001\
\006\001\000\000\011\001\031\001\021\001\036\001\031\001\060\000\
\009\001\000\000\025\001\009\001\000\000\042\001\031\001\000\000\
\025\001\000\000\071\000\072\000\000\000\074\000\075\000\000\000\
\077\000\004\001\009\001\044\001\026\001\027\001\031\001\084\000\
\085\000\071\000\072\000\029\000\074\000\075\000\036\001\077\000\
\031\001\000\000\009\001\005\001\007\001\001\001\084\000\085\000\
\031\001\011\001\006\001\009\001\008\001\007\001\010\001\007\001\
\109\000\051\000\111\000\112\000\009\001\009\001\115\000\116\000\
\031\001\118\000\119\000\023\001\121\000\011\001\123\000\109\000\
\007\001\031\001\068\000\069\000\070\000\033\001\034\001\035\001\
\007\001\134\000\031\001\031\001\026\001\027\001\009\001\081\000\
\003\001\083\000\031\001\006\001\026\001\027\001\036\001\010\001\
\134\000\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\157\000\005\001\159\000\160\000\031\001\103\000\011\001\011\001\
\031\001\002\001\008\001\011\001\031\001\006\001\002\001\157\000\
\011\001\008\001\006\001\011\001\025\001\031\001\041\001\180\000\
\181\000\025\001\032\001\032\001\185\000\186\000\025\001\188\000\
\032\001\025\001\022\001\032\001\193\000\032\001\001\001\026\001\
\032\001\005\001\199\000\006\001\022\001\008\001\203\000\010\001\
\032\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\154\000\026\001\027\001\022\001\023\001\001\000\002\000\003\000\
\162\000\163\000\021\001\036\001\084\000\085\000\033\001\034\001\
\035\001\005\001\026\001\027\001\045\001\019\001\041\001\008\001\
\026\001\027\001\008\001\020\001\036\001\005\001\005\001\020\001\
\005\001\009\001\036\001\011\001\009\001\045\001\011\001\009\001\
\008\001\011\001\009\001\008\001\011\001\009\001\008\001\011\001\
\008\001\058\000\026\001\027\001\042\001\026\001\027\001\031\001\
\026\001\027\001\031\001\031\001\036\001\031\001\042\001\036\001\
\040\001\058\000\036\001\040\001\255\255\045\001\040\001\009\001\
\045\001\011\001\009\001\045\001\011\001\009\001\045\001\011\001\
\255\255\045\001\009\001\255\255\011\001\009\001\255\255\011\001\
\026\001\027\001\002\000\026\001\027\001\255\255\026\001\027\001\
\255\255\255\255\036\001\026\001\027\001\036\001\026\001\027\001\
\036\001\255\255\009\001\045\001\011\001\036\001\045\001\255\255\
\036\001\045\001\009\001\255\255\011\001\009\001\045\001\011\001\
\009\001\045\001\011\001\026\001\027\001\009\001\255\255\011\001\
\009\001\255\255\011\001\026\001\027\001\036\001\026\001\027\001\
\255\255\026\001\027\001\026\001\027\001\036\001\045\001\027\001\
\036\001\057\000\009\001\036\001\011\001\036\001\045\001\006\000\
\036\001\045\001\255\255\036\001\045\001\255\255\255\255\071\000\
\255\255\045\001\074\000\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\029\000\255\255\
\255\255\089\000\090\000\255\255\092\000\255\255\045\001\255\255\
\255\255\255\255\098\000\099\000\255\255\255\255\102\000\001\001\
\104\000\255\255\255\255\255\255\006\001\255\255\008\001\255\255\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\022\001\023\001\255\255\255\255\
\071\000\072\000\255\255\074\000\075\000\255\255\077\000\033\001\
\034\001\035\001\255\255\255\255\140\000\141\000\142\000\041\001\
\144\000\145\000\146\000\147\000\148\000\149\000\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\109\000\255\255\
\255\255\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\255\255\001\001\178\000\032\001\255\255\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\041\001\042\001\133\000\134\000\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\023\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\033\001\034\001\035\001\255\255\156\000\157\000\025\001\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\255\255\255\255\255\255\255\255\005\001\006\001\255\255\041\001\
\042\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\010\001\031\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\006\001\
\041\001\255\255\043\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\022\001\
\023\001\024\001\255\255\255\255\041\001\006\001\029\001\030\001\
\255\255\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\041\001\255\255\255\255\255\255\255\255\255\255\
\025\001\255\255\255\255\006\001\255\255\255\255\031\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\041\001\006\001\255\255\255\255\255\255\010\001\025\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\006\001\
\255\255\255\255\255\255\010\001\041\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\006\001\255\255\255\255\
\255\255\010\001\041\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\006\001\255\255\255\255\255\255\010\001\
\041\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\006\001\255\255\255\255\255\255\010\001\025\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\006\001\
\255\255\255\255\031\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\041\001\006\001\255\255\255\255\
\255\255\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\255\255\006\001\255\255\255\255\255\255\010\001\
\041\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\006\001\255\255\255\255\255\255\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\006\001\041\001\255\255\
\255\255\010\001\032\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\006\001\041\001\255\255\255\255\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\041\001"

let yynames_const = "\
  LEMMA\000\
  WILDCARD\000\
  EOF\000\
  COMMA\000\
  ARROW\000\
  COLLON\000\
  LBRACE\000\
  RBRACE\000\
  LPARAN\000\
  RPARAN\000\
  ZERO\000\
  SUCC\000\
  NIL\000\
  TRUE\000\
  FALSE\000\
  FOR\000\
  IF\000\
  THEN\000\
  ELSE\000\
  DO\000\
  SLASH\000\
  FORALL\000\
  EXISTS\000\
  EQ\000\
  PROP_AND\000\
  PROP_OR\000\
  PROP_IMPLIES\000\
  TOP\000\
  BOT\000\
  DOT\000\
  TYPE_HINT\000\
  UNIT\000\
  BOOL\000\
  NAT\000\
  FAT_ARROW\000\
  GENERIC_TYPE\000\
  ARROW_TYPE\000\
  REFINED_TYPE\000\
  BAR\000\
  LSQ\000\
  RSQ\000\
  PROD\000\
  LANGLE\000\
  RANGLE\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "lambdaAst.mly"
      ( Top )
# 508 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "lambdaAst.mly"
      ( Bot )
# 514 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'prop_grammar) in
    Obj.repr(
# 55 "lambdaAst.mly"
                             ( _2 )
# 521 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prop_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prop_grammar) in
    Obj.repr(
# 56 "lambdaAst.mly"
                                     ( Conjunction (_1, _3) )
# 529 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prop_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prop_grammar) in
    Obj.repr(
# 57 "lambdaAst.mly"
                                    ( Disjunction (_1, _3) )
# 537 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prop_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prop_grammar) in
    Obj.repr(
# 58 "lambdaAst.mly"
                                                         ( Implication (_1, _3) )
# 545 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eq_prop_grammar) in
    Obj.repr(
# 59 "lambdaAst.mly"
                  ( _1 )
# 552 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_grammar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prop_grammar) in
    Obj.repr(
# 60 "lambdaAst.mly"
                                                                 ( Forall (_2, _4, _6) )
# 561 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_grammar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prop_grammar) in
    Obj.repr(
# 61 "lambdaAst.mly"
                                                                 ( Exists (_2, _4, _6) )
# 570 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'prop_grammar) in
    Obj.repr(
# 62 "lambdaAst.mly"
                                             ( ForallGen (_2, _4) )
# 578 "lambdaAst.ml"
               : 'prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 64 "lambdaAst.mly"
                                                      ( Eq (_1, _3, _5) )
# 587 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'app_term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 65 "lambdaAst.mly"
                                                          ( Eq (_1, _3, _5) )
# 596 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'abs_term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 66 "lambdaAst.mly"
                                                          ( Eq (_1, _3, _5) )
# 605 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'app_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 68 "lambdaAst.mly"
                                                          ( Eq (_1, _3, _5) )
# 614 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'app_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'app_term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 69 "lambdaAst.mly"
                                                              ( Eq (_1, _3, _5) )
# 623 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'app_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'abs_term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 70 "lambdaAst.mly"
                                                              ( Eq (_1, _3, _5) )
# 632 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'abs_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 72 "lambdaAst.mly"
                                                          ( Eq (_1, _3, _5) )
# 641 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'abs_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'app_term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 73 "lambdaAst.mly"
                                                              ( Eq (_1, _3, _5) )
# 650 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'abs_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'abs_term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 74 "lambdaAst.mly"
                                                              ( Eq (_1, _3, _5) )
# 659 "lambdaAst.ml"
               : 'eq_prop_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "lambdaAst.mly"
       ( Bool )
# 665 "lambdaAst.ml"
               : 'atom_type_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "lambdaAst.mly"
       ( Unit )
# 671 "lambdaAst.ml"
               : 'atom_type_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "lambdaAst.mly"
      ( Nat )
# 677 "lambdaAst.ml"
               : 'atom_type_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "lambdaAst.mly"
      ( TVar _1 )
# 684 "lambdaAst.ml"
               : 'atom_type_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_grammar) in
    Obj.repr(
# 80 "lambdaAst.mly"
                             ( _2 )
# 691 "lambdaAst.ml"
               : 'atom_type_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom_type_grammar) in
    Obj.repr(
# 82 "lambdaAst.mly"
                    ( _1 )
# 698 "lambdaAst.ml"
               : 'type_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 83 "lambdaAst.mly"
                                                   ( Map ("_", _1, _3) )
# 706 "lambdaAst.ml"
               : 'type_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'type_grammar) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 84 "lambdaAst.mly"
                                                                          ( Map (_2, _4, _7) )
# 715 "lambdaAst.ml"
               : 'type_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_grammar) in
    Obj.repr(
# 85 "lambdaAst.mly"
                                                 ( Gen (_2, _4) )
# 723 "lambdaAst.ml"
               : 'type_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'type_grammar) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'prop_grammar) in
    Obj.repr(
# 86 "lambdaAst.mly"
                                                                            ( Refine (_2, _4, _6) )
# 732 "lambdaAst.ml"
               : 'type_grammar))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'prop_grammar) in
    Obj.repr(
# 87 "lambdaAst.mly"
                                   ( Refine ("_", Unit, _3) )
# 739 "lambdaAst.ml"
               : 'type_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prod_type) in
    Obj.repr(
# 88 "lambdaAst.mly"
                       ( Prod _1 )
# 746 "lambdaAst.ml"
               : 'type_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atom_type_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_type_grammar) in
    Obj.repr(
# 90 "lambdaAst.mly"
                                           ( [_1; _3] )
# 754 "lambdaAst.ml"
               : 'prod_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atom_type_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prod_type) in
    Obj.repr(
# 91 "lambdaAst.mly"
                                   ( _1 :: _3 )
# 762 "lambdaAst.ml"
               : 'prod_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "lambdaAst.mly"
      ( Nil )
# 768 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "lambdaAst.mly"
       ( NatO )
# 774 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "lambdaAst.mly"
       ( NatSucc )
# 780 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "lambdaAst.mly"
        ( False )
# 786 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "lambdaAst.mly"
       ( True )
# 792 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "lambdaAst.mly"
      ( Var _1 )
# 799 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'app_term_grammar) in
    Obj.repr(
# 99 "lambdaAst.mly"
                                 ( _2 )
# 806 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'abs_term_grammar) in
    Obj.repr(
# 100 "lambdaAst.mly"
                                 ( _2 )
# 813 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "lambdaAst.mly"
                       ( Proj (_1, _3) )
# 821 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term_list) in
    Obj.repr(
# 102 "lambdaAst.mly"
                    ( Tuple _2 )
# 828 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'term_grammar) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'prop_grammar) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'term_grammar) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'term_grammar) in
    Obj.repr(
# 103 "lambdaAst.mly"
                                                                                                             ( Ite (_2, _8, _12, _4) )
# 838 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : 'term_grammar) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'prop_grammar) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'term_grammar) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'term_grammar) in
    Obj.repr(
# 104 "lambdaAst.mly"
                                                                                                       ( For (_2, _8, _11, _4) )
# 848 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'term_grammar) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'term_grammar) in
    Obj.repr(
# 105 "lambdaAst.mly"
                                                                                  ( Ite (_2, _5, _9, Top) )
# 857 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'term_grammar) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'term_grammar) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'term_grammar) in
    Obj.repr(
# 106 "lambdaAst.mly"
                                                                            ( For (_2, _5, _8, Top) )
# 866 "lambdaAst.ml"
               : 'term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_grammar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term_grammar) in
    Obj.repr(
# 108 "lambdaAst.mly"
                                                 ( Abs (_2, _4, _6) )
# 875 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_grammar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'app_term_grammar) in
    Obj.repr(
# 109 "lambdaAst.mly"
                                                     ( Abs (_2, _4, _6) )
# 884 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'app_term_grammar) in
    Obj.repr(
# 110 "lambdaAst.mly"
                                       ( Generic (_3, _5) )
# 892 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term_grammar) in
    Obj.repr(
# 111 "lambdaAst.mly"
                                   ( Generic (_3, _5) )
# 900 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_grammar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'abs_term_grammar) in
    Obj.repr(
# 112 "lambdaAst.mly"
                                                     ( Abs (_2, _4, _6) )
# 909 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'abs_term_grammar) in
    Obj.repr(
# 113 "lambdaAst.mly"
                                       ( Generic (_3, _5) )
# 917 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_grammar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'abs_term_grammar) in
    Obj.repr(
# 114 "lambdaAst.mly"
                                                          ( Abs ("_", _4, _6) )
# 925 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'abs_term_grammar) in
    Obj.repr(
# 115 "lambdaAst.mly"
                                            ( Generic ("_", _5) )
# 932 "lambdaAst.ml"
               : 'abs_term_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term_grammar) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term_grammar) in
    Obj.repr(
# 117 "lambdaAst.mly"
                            ( App (_1, _2) )
# 940 "lambdaAst.ml"
               : 'app_term_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_term_grammar) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term_grammar) in
    Obj.repr(
# 118 "lambdaAst.mly"
                                ( App (_1, _2) )
# 948 "lambdaAst.ml"
               : 'app_term_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'app_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_grammar) in
    Obj.repr(
# 119 "lambdaAst.mly"
                                              ( TApp (_1, _3) )
# 956 "lambdaAst.ml"
               : 'app_term_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_grammar) in
    Obj.repr(
# 120 "lambdaAst.mly"
                                          ( TApp (_1, _3) )
# 964 "lambdaAst.ml"
               : 'app_term_grammar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_term_grammar) in
    Obj.repr(
# 122 "lambdaAst.mly"
                   ( [_1] )
# 971 "lambdaAst.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term_grammar) in
    Obj.repr(
# 123 "lambdaAst.mly"
               ( [_1] )
# 978 "lambdaAst.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term_list) in
    Obj.repr(
# 124 "lambdaAst.mly"
                                   ( _1 :: _3 )
# 986 "lambdaAst.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term_grammar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term_list) in
    Obj.repr(
# 125 "lambdaAst.mly"
                               ( _1 :: _3 )
# 994 "lambdaAst.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term_grammar) in
    Obj.repr(
# 127 "lambdaAst.mly"
                   ( _1 )
# 1001 "lambdaAst.ml"
               : PreIr.term_ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_grammar) in
    Obj.repr(
# 129 "lambdaAst.mly"
                   ( _1 )
# 1008 "lambdaAst.ml"
               : PreIr.type_ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prop_grammar) in
    Obj.repr(
# 131 "lambdaAst.mly"
                   ( _1 )
# 1015 "lambdaAst.ml"
               : PreIr.prop_ast))
(* Entry lambda_term *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lambda_type *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lambda_prop *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let lambda_term (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : PreIr.term_ast)
let lambda_type (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : PreIr.type_ast)
let lambda_prop (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : PreIr.prop_ast)
